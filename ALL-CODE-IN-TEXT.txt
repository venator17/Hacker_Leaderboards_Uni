app.py

from flask import Flask, render_template, request, redirect, url_for, session, g, flash
import sqlite3
import hashlib # For password hashing

app = Flask(__name__)
app.secret_key = 'your_new_super_secret_key_here' # IMPORTANT: Change this to a strong, random key!

DATABASE = 'hacker_leaderboard.db'

# --- Database setup and helper functions ---
def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
        db.row_factory = sqlite3.Row # This makes rows behave like dictionaries
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def init_db():
    with app.app_context():
        db = get_db()
        db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                is_admin INTEGER DEFAULT 0
            )
        ''')
        db.execute('''
            CREATE TABLE IF NOT EXISTS leaderboard (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                country TEXT NOT NULL,
                challenges_completed INTEGER DEFAULT 0,
                respect INTEGER DEFAULT 0,
                user_id INTEGER,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        db.execute('''
            CREATE TABLE IF NOT EXISTS likes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                liker_user_id INTEGER NOT NULL,
                liked_leaderboard_id INTEGER NOT NULL,
                FOREIGN KEY (liker_user_id) REFERENCES users (id),
                FOREIGN KEY (liked_leaderboard_id) REFERENCES leaderboard (id),
                UNIQUE(liker_user_id, liked_leaderboard_id)
            )
        ''')

        # Add admin user if not exists
        admin_username = 'admin'
        admin_password_hash = hashlib.sha256('super_secure_admin_password'.encode()).hexdigest() # IMPORTANT: Use a strong password!
        try:
            db.execute("INSERT INTO users (username, password, is_admin) VALUES (?, ?, ?)",
                       (admin_username, admin_password_hash, 1))
            db.commit()
            print("Admin user created.")
        except sqlite3.IntegrityError:
            print("Admin user already exists.")
        db.commit() # Commit changes to users table if admin was added

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def check_password(hashed_password, user_password):
    return hashed_password == hashlib.sha256(user_password.encode()).hexdigest()

def get_rank(challenges_completed):
    # Ensure challenges_completed is treated as an integer for comparison
    challenges_completed = int(challenges_completed)

    if challenges_completed >= 30:
        return "Legend"
    elif challenges_completed >= 20:
        return "Guru"
    elif challenges_completed >= 12:
        return "Elite Hacker"
    elif challenges_completed >= 6:
        return "Pro Hacker"
    elif challenges_completed >= 3:
        return "Hacker"
    else: # Covers 0, 1, 2
        return "Script Kiddie"

# --- Routes ---

@app.route('/')
def index():
    db = get_db()
    leaderboard_entries = db.execute('SELECT * FROM leaderboard ORDER BY respect DESC, challenges_completed DESC').fetchall()
    # db.close() # REMOVED

    leaderboard_data = []
    current_user_id = session.get('user_id')

    for entry in leaderboard_entries:
        entry_dict = dict(entry) # Convert Row object to dictionary
        entry_dict['rank'] = get_rank(entry_dict['challenges_completed'])

        if current_user_id:
            # No need to call get_db() again here, as db from above is still valid for this request
            has_liked = db.execute(
                'SELECT 1 FROM likes WHERE liker_user_id = ? AND liked_leaderboard_id = ?',
                (current_user_id, entry_dict['id'])
            ).fetchone()
            # db.close() # REMOVED
            entry_dict['has_liked'] = bool(has_liked) # True if a row was found
        else:
            entry_dict['has_liked'] = False

        leaderboard_data.append(entry_dict)

    return render_template('index.html', leaderboard=leaderboard_data)

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        country = request.form['country']

        if password != confirm_password:
            flash('Passwords do not match. Please try again.', 'danger')
            return render_template('register.html')

        hashed_password = hash_password(password)

        db = get_db()
        try:
            # Insert into users table
            cursor = db.execute("INSERT INTO users (username, password) VALUES (?, ?)",
                               (username, hashed_password))
            user_id = cursor.lastrowid # Get the ID of the newly created user

            # Also create an entry in the leaderboard table WITH country
            db.execute("INSERT INTO leaderboard (username, country, challenges_completed, respect, user_id) VALUES (?, ?, ?, ?, ?)",
                       (username, country, 0, 0, user_id))
            db.commit()
            flash('Registration successful! Please log in.', 'success')
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            flash('Username already exists. Please choose a different one.', 'danger')
        # finally: # REMOVED finally block with db.close()
            # db.close()
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        # db.close() # REMOVED

        if user and check_password(user['password'], password):
            session['logged_in'] = True
            session['user_id'] = user['id']
            session['username'] = user['username']
            session['is_admin'] = bool(user['is_admin'])
            flash('Logged in successfully!', 'success')
            return redirect(url_for('index'))
        else:
            flash('Invalid username or password.', 'danger')
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    session.pop('user_id', None)
    session.pop('username', None)
    session.pop('is_admin', None)
    flash('You have been logged out.', 'info')
    return redirect(url_for('index'))

@app.route('/profile/edit', methods=['GET', 'POST'])
def edit_profile():
    if not session.get('logged_in'):
        flash('You need to be logged in to edit your profile.', 'danger')
        return redirect(url_for('login'))

    user_id = session['user_id']
    db = get_db()

    if request.method == 'POST':
        new_challenges = request.form['challenges_completed']
        new_country = request.form['country']
        
        db.execute('UPDATE leaderboard SET challenges_completed = ?, country = ? WHERE user_id = ?',
                   (new_challenges, new_country, user_id))
        db.commit()
        flash('Your profile has been updated!', 'success')
        # db.close() # REMOVED
        return redirect(url_for('index'))
    else:
        profile_data = db.execute('SELECT * FROM leaderboard WHERE user_id = ?', (user_id,)).fetchone()
        # db.close() # REMOVED
        if profile_data:
            return render_template('edit_profile.html', profile=dict(profile_data))
        else:
            flash('Profile data not found.', 'danger')
            return redirect(url_for('index'))


@app.route('/respect/<int:leaderboard_entry_id>', methods=['POST'])
def respect_entry(leaderboard_entry_id):
    if not session.get('logged_in'):
        flash('You need to be logged in to give respect.', 'danger')
        return redirect(url_for('login'))

    liker_user_id = session['user_id']
    db = get_db()

    try:
        # Check if user has already liked this entry
        existing_like = db.execute(
            'SELECT 1 FROM likes WHERE liker_user_id = ? AND liked_leaderboard_id = ?',
            (liker_user_id, leaderboard_entry_id)
        ).fetchone()

        if existing_like:
            flash('You have already given respect to this entry.', 'warning')
        else:
            # Add a like record
            db.execute(
                'INSERT INTO likes (liker_user_id, liked_leaderboard_id) VALUES (?, ?)',
                (liker_user_id, leaderboard_entry_id)
            )
            # Increment respect count in leaderboard
            db.execute(
                'UPDATE leaderboard SET respect = respect + 1 WHERE id = ?',
                (leaderboard_entry_id,)
            )
            db.commit()
            flash('Respect given!', 'success')
    except Exception as e:
        flash(f'An error occurred: {e}', 'danger')
    # finally: # REMOVED finally block with db.close()
        # db.close()
    return redirect(url_for('index'))


# --- Admin Panel Routes ---

@app.before_request
def check_admin_privileges():
    # List of admin-only endpoints (prefix 'admin_')
    admin_endpoints = [
        'admin_panel', 'admin_add_leaderboard', 'admin_edit_leaderboard',
        'admin_delete_leaderboard', 'admin_add_user', 'admin_edit_user', 'admin_delete_user'
    ]
    if request.endpoint and request.endpoint in admin_endpoints and not session.get('is_admin'):
        flash('Access denied. Admin privileges required.', 'danger')
        return redirect(url_for('index'))


@app.route('/admin')
def admin_panel():
    db = get_db()
    leaderboard_entries = db.execute('SELECT * FROM leaderboard').fetchall()
    users = db.execute('SELECT * FROM users').fetchall()
    # db.close() # REMOVED
    return render_template('admin.html', leaderboard_entries=leaderboard_entries, users=users)

# Admin - Add Leaderboard Entry
@app.route('/admin/leaderboard/add', methods=['GET', 'POST'])
def admin_add_leaderboard():
    if request.method == 'POST':
        username = request.form['username']
        country = request.form['country']
        challenges_completed = request.form.get('challenges_completed', 0)
        respect = request.form.get('respect', 0)

        db = get_db()
        try:
            # Check if a user with this username already exists in 'users'
            # If so, link to that user_id. If not, create a placeholder user in 'users'.
            user_in_users = db.execute('SELECT id FROM users WHERE username = ?', (username,)).fetchone()
            user_id = None
            if user_in_users:
                user_id = user_in_users['id']
            else:
                # Create a minimal user entry if username not in users, for consistency
                # This account won't have a password for login, it's just a placeholder
                temp_user_cursor = db.execute("INSERT INTO users (username, password, is_admin) VALUES (?, ?, ?)",
                                             (username, 'temp_no_login_password', 0))
                user_id = temp_user_cursor.lastrowid


            db.execute("INSERT INTO leaderboard (username, country, challenges_completed, respect, user_id) VALUES (?, ?, ?, ?, ?)",
                       (username, country, challenges_completed, respect, user_id))
            db.commit()
            flash('Leaderboard entry added!', 'success')
            return redirect(url_for('admin_panel'))
        except sqlite3.IntegrityError:
            flash('Username already exists in leaderboard.', 'danger')
        # finally: # REMOVED finally block with db.close()
            # db.close()
    return render_template('admin_add_leaderboard.html')

# Admin - Edit Leaderboard Entry
@app.route('/admin/leaderboard/edit/<int:entry_id>', methods=['GET', 'POST'])
def admin_edit_leaderboard(entry_id):
    db = get_db()
    entry = db.execute('SELECT * FROM leaderboard WHERE id = ?', (entry_id,)).fetchone()

    if not entry:
        flash('Leaderboard entry not found.', 'danger')
        # db.close() # REMOVED
        return redirect(url_for('admin_panel'))

    if request.method == 'POST':
        new_username = request.form['username']
        new_country = request.form['country']
        new_challenges = request.form['challenges_completed']
        new_respect = request.form['respect']

        try:
            db.execute('UPDATE leaderboard SET username = ?, country = ?, challenges_completed = ?, respect = ? WHERE id = ?',
                       (new_username, new_country, new_challenges, new_respect, entry_id))
            # Also update username in users table if linked
            if entry['user_id']:
                db.execute('UPDATE users SET username = ? WHERE id = ?', (new_username, entry['user_id']))
            db.commit()
            flash('Leaderboard entry updated!', 'success')
            return redirect(url_for('admin_panel'))
        except sqlite3.IntegrityError:
            flash('Username already exists. Please choose a different one.', 'danger')
        # finally: # REMOVED finally block with db.close()
            # db.close()
    return render_template('admin_edit_leaderboard.html', entry=dict(entry))

# Admin - Delete Leaderboard Entry
@app.route('/admin/leaderboard/delete/<int:entry_id>', methods=['POST'])
def admin_delete_leaderboard(entry_id):
    db = get_db()
    try:
        # Delete associated likes first to avoid foreign key constraints
        db.execute('DELETE FROM likes WHERE liked_leaderboard_id = ?', (entry_id,))
        db.execute('DELETE FROM leaderboard WHERE id = ?', (entry_id,))
        db.commit()
        flash('Leaderboard entry deleted!', 'success')
    except Exception as e:
        flash(f'Error deleting entry: {e}', 'danger')
    # finally: # REMOVED finally block with db.close()
        # db.close()
    return redirect(url_for('admin_panel'))

# Admin - Add User
@app.route('/admin/user/add', methods=['GET', 'POST'])
def admin_add_user():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        country = request.form.get('country', 'Unknown')
        is_admin = 1 if request.form.get('is_admin') else 0
        hashed_password = hash_password(password)

        db = get_db()
        try:
            cursor = db.execute("INSERT INTO users (username, password, is_admin) VALUES (?, ?, ?)",
                               (username, hashed_password, is_admin))
            user_id = cursor.lastrowid
            
            # Also create a corresponding leaderboard entry if it doesn't exist
            # This handles cases where you add a user directly via admin panel
            existing_leaderboard_entry = db.execute('SELECT id FROM leaderboard WHERE user_id = ?', (user_id,)).fetchone()
            if not existing_leaderboard_entry:
                 # Default country and 0 challenges/respect for new user
                db.execute("INSERT INTO leaderboard (username, country, challenges_completed, respect, user_id) VALUES (?, ?, ?, ?, ?)",
                            (username, country, 0, 0, user_id))
            db.commit()
            flash('User added!', 'success')
            return redirect(url_for('admin_panel'))
        except sqlite3.IntegrityError:
            flash('Username already exists.', 'danger')
        # finally: # REMOVED finally block with db.close()
            # db.close()
    return render_template('admin_add_user.html')

# Admin - Edit User
@app.route('/admin/user/edit/<int:user_id>', methods=['GET', 'POST'])
def admin_edit_user(user_id):
    db = get_db()
    user = db.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
    linked_leaderboard_entry = db.execute('SELECT country FROM leaderboard WHERE user_id = ?', (user_id,)).fetchone()

    if not user:
        flash('User not found.', 'danger')
        # db.close() # REMOVED
        return redirect(url_for('admin_panel'))

    if request.method == 'POST':
        new_username = request.form['username']
        new_password = request.form['password']
        new_country = request.form.get('country', 'Unknown')
        new_is_admin = 1 if request.form.get('is_admin') else 0

        try:
            # Update username and admin status
            db.execute('UPDATE users SET username = ?, is_admin = ? WHERE id = ?',
                       (new_username, new_is_admin, user_id))
            # If password provided, update it
            if new_password:
                hashed_password = hash_password(new_password)
                db.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, user_id))

            # Also update username and country in linked leaderboard entry
            db.execute('UPDATE leaderboard SET username = ?, country = ? WHERE user_id = ?', (new_username, new_country, user_id))
            db.commit()
            flash('User updated!', 'success')
            return redirect(url_for('admin_panel'))
        except sqlite3.IntegrityError:
            flash('Username already exists.', 'danger')
        # finally: # REMOVED finally block with db.close()
            # db.close()
    return render_template('admin_edit_user.html', user=dict(user), linked_country=linked_leaderboard_entry['country'] if linked_leaderboard_entry else 'Unknown')

# Admin - Delete User
@app.route('/admin/user/delete/<int:user_id>', methods=['POST'])
def admin_delete_user(user_id):
    if user_id == session.get('user_id'):
        flash('You cannot delete your own admin account.', 'danger')
        return redirect(url_for('admin_panel'))

    db = get_db()
    try:
        # Get leaderboard entry ID linked to this user
        leaderboard_entry_id = db.execute('SELECT id FROM leaderboard WHERE user_id = ?', (user_id,)).fetchone()
        if leaderboard_entry_id:
            # Delete associated likes for the leaderboard entry
            db.execute('DELETE FROM likes WHERE liked_leaderboard_id = ?', (leaderboard_entry_id[0],))
            # Delete the leaderboard entry itself
            db.execute('DELETE FROM leaderboard WHERE user_id = ?', (user_id,))
        
        # Delete any likes *this user* has made
        db.execute('DELETE FROM likes WHERE liker_user_id = ?', (user_id,))
        
        # Finally, delete the user
        db.execute('DELETE FROM users WHERE id = ?', (user_id,))
        db.commit()
        flash('User deleted!', 'success')
    except Exception as e:
        flash(f'Error deleting user: {e}', 'danger')
    # finally: # REMOVED finally block with db.close()
        # db.close()
    return redirect(url_for('admin_panel'))


if __name__ == '__main__':
    with app.app_context():
        init_db() # Ensure DB is initialized before running the app
    app.run(debug=True)

/static/style.css
:root {
    --pixel-font: 'Press Start 2P', monospace;
    --bg-black: #000000;
    --main-cyan: #00FFFF; /* Used for text and borders (now also for table headers background) */
    --dark-cyan: #008080; /* A slightly darker cyan for backgrounds and inner borders */
    --medium-grey: #444444;
    --dark-grey: #222222;
}

body {
    font-family: var(--pixel-font);
    background-color: var(--bg-black);
    color: var(--main-cyan); /* Main text color */
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    font-size: 0.85em; /* Adjust for better readability with pixel font */
    line-height: 1.6; /* Give a bit more space for pixel font */
}

.container {
    max-width: 960px;
    margin: 20px auto;
    padding: 20px;
    background-color: var(--dark-grey);
    border: 2px solid var(--main-cyan);
    border-radius: 15px; /* Rounder corners for main container */
}

h1, h2, h3 {
    color: var(--main-cyan);
    text-align: center;
    margin-bottom: 20px;
}

header {
    background-color: var(--bg-black);
    padding: 15px 0;
    border-bottom: 2px solid var(--main-cyan);
}

nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    justify-content: center;
}

nav ul li {
    margin: 0 15px;
}

nav ul li a {
    color: var(--main-cyan);
    text-decoration: none;
    font-weight: bold;
    padding: 5px 10px;
    border: 1px solid var(--main-cyan);
    border-radius: 8px; /* Rounder corners */
    transition: background-color 0.3s ease, color 0.3s ease;
}

nav ul li a:hover {
    background-color: var(--main-cyan);
    color: var(--bg-black);
}

.flashes {
    list-style: none;
    padding: 10px;
    margin: 10px 0;
    text-align: center;
    border: 1px solid;
    border-radius: 8px; /* Rounder corners */
}

.flashes li {
    padding: 8px;
    margin-bottom: 5px;
}

.flashes .success {
    background-color: #006400; /* Darker green */
    color: #00FF00; /* Neon Green */
    border-color: #00FF00;
}

.flashes .danger {
    background-color: #8B0000; /* Darker red */
    color: #FF0000; /* Neon Red */
    border-color: #FF0000;
}

.flashes .info {
    background-color: #00008B; /* Darker blue */
    color: #00BFFF; /* Deep Sky Blue */
    border-color: #00BFFF;
}

.flashes .warning {
    background-color: #8B4513; /* Darker orange */
    color: #FFA500; /* Orange */
    border-color: #FFA500;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    border: 2px solid var(--main-cyan);
    /* REMOVED: border-radius: 15px; to make all corners sharp */
    overflow: hidden; /* Keep this to ensure internal borders/backgrounds are clipped cleanly */
}

th, td {
    border: 1px solid var(--dark-cyan); /* Lighter border for inner cells */
    padding: 10px;
    text-align: left;
    color: var(--main-cyan); /* Main cyan for all text in table */
}

th {
    background-color: var(--main-cyan); /* Light Cyan background */
    font-weight: bold;
    color: var(--bg-black); /* Black font */
    padding: 12px 10px; /* Slightly more vertical padding for nicer look */
    font-size: 0.9em; /* Slightly larger text for headers */
    border-bottom: 2px solid var(--bg-black); /* A darker separation line below header */
}

/* No specific border-radius for th:first-child/last-child needed now that table is sharp */

tr:nth-child(even) {
    background-color: var(--dark-grey); /* Dark grey for even rows */
}

tr:hover {
    background-color: var(--medium-grey); /* Slightly lighter grey on hover */
}

form {
    background-color: var(--dark-grey);
    padding: 20px;
    border: 2px solid var(--main-cyan);
    border-radius: 15px; /* Rounder corners for forms */
    margin-top: 20px;
}

form div {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    color: var(--main-cyan);
    font-weight: bold;
}

input[type="text"],
input[type="password"],
input[type="number"],
input[type="email"],
select {
    width: calc(100% - 24px); /* Adjust for padding and border */
    padding: 10px;
    margin-top: 5px;
    border: 1px solid var(--main-cyan);
    background-color: var(--bg-black);
    color: var(--main-cyan);
    border-radius: 8px; /* Rounder corners for inputs */
    box-sizing: border-box;
    transition: border-color 0.3s ease;
}

input[type="text"]:focus,
input[type="password"]:focus,
input[type="number"]:focus,
input[type="email"]:focus,
select:focus {
    border-color: #00FFFF; /* Brighter cyan on focus */
    outline: none;
}

button, input[type="submit"], .button { /* .button class for consistency with links */
    background-color: var(--main-cyan);
    color: var(--bg-black);
    border: none;
    padding: 10px 20px;
    border-radius: 8px; /* Rounder corners */
    cursor: pointer;
    font-size: 1em;
    font-weight: bold;
    transition: background-color 0.3s ease, transform 0.2s ease;
    margin-right: 10px;
}

button:hover, input[type="submit"]:hover, .button:hover {
    background-color: #00DCDC; /* Slightly darker cyan on hover */
    transform: translateY(-2px);
}

button:active, input[type="submit"]:active, .button:active {
    transform: translateY(0);
}

.btn-danger {
    background-color: #FF0000; /* Neon Red */
    color: var(--bg-black);
}

.btn-danger:hover {
    background-color: #CC0000; /* Darker red on hover */
}

.btn-primary {
    background-color: #00BFFF; /* Deep Sky Blue */
    color: var(--bg-black);
}

.btn-primary:hover {
    background-color: #0099CC; /* Darker blue on hover */
}

.actions {
    display: flex;
    gap: 10px;
    align-items: center;
}

.actions form {
    margin: 0;
    padding: 0;
    background: none;
    border: none;
    display: inline;
}

.actions button {
    padding: 8px 12px;
    font-size: 0.8em;
}

.respect-button {
    background: none;
    border: none;
    color: var(--main-cyan);
    cursor: pointer;
    font-size: 1.8em;
    padding: 0;
    transition: color 0.2s ease;
}

.respect-button:hover {
    color: #00DCDC;
}

.respect-button.respected {
    color: #00FF00; /* Neon Green for respected */
}

/* Inline label for checkboxes */
.inline-label {
    display: inline-block;
    margin-left: 5px;
}


/* --- JQuery UI Datepicker Overrides (Pixel Style) --- */
/* General Datepicker container */
.ui-datepicker {
    font-family: var(--pixel-font);
    font-size: 0.8em; /* Match general text size */
    background-color: var(--dark-grey);
    border: 2px solid var(--main-cyan);
    border-radius: 8px; /* Rounder corners */
    padding: 10px;
}

/* Datepicker header (month/year navigation) */
.ui-datepicker-header {
    background-color: var(--dark-cyan);
    color: var(--bg-black);
    border: 1px solid var(--main-cyan);
    border-radius: 5px; /* Rounder corners */
    padding: 5px;
}

/* Prev/Next buttons */
.ui-datepicker .ui-datepicker-prev,
.ui-datepicker .ui-datepicker-next {
    color: var(--bg-black);
    background-color: var(--main-cyan);
    border: 1px solid var(--bg-black);
    border-radius: 4px; /* Rounder corners */
    cursor: pointer;
    padding: 2px 5px;
    top: 2px; /* Adjust position */
    font-size: 1em; /* Make symbols clear */
}

.ui-datepicker .ui-datepicker-prev:hover,
.ui-datepicker .ui-datepicker-next:hover {
    background-color: #00DCDC;
}

/* Month and Year dropdowns */
.ui-datepicker select.ui-datepicker-month,
.ui-datepicker select.ui-datepicker-year {
    background-color: var(--dark-cyan);
    color: var(--bg-black);
    border: 1px solid var(--main-cyan);
    border-radius: 4px; /* Rounder corners */
    padding: 2px;
    margin: 0 5px;
    font-family: var(--pixel-font);
    font-size: 0.9em;
}

/* Days of the week */
.ui-datepicker th {
    /* Note: This specific 'th' rule applies to the datepicker's internal day headers,
       not the main leaderboard table headers. */
    background-color: var(--dark-grey); /* Keep the dark grey background */
    color: var(--main-cyan);
    border: none; /* No border for day headers */
}

/* Individual days (cells) */
.ui-datepicker td {
    border: 1px solid var(--dark-grey); /* Subtle border for cells */
    padding: 5px;
}

.ui-datepicker td span,
.ui-datepicker td a {
    color: var(--main-cyan);
    text-align: center;
    display: block;
    padding: 3px;
    text-decoration: none;
    background-color: var(--bg-black); /* Default cell background */
}

/* Hover state for days */
.ui-datepicker td a:hover {
    background-color: var(--medium-grey);
    color: var(--main-cyan);
    border: 1px solid var(--main-cyan);
}

/* Selected day */
.ui-state-active, .ui-datepicker td.ui-datepicker-current-day a {
    background-color: var(--main-cyan) !important;
    color: var(--bg-black) !important;
    font-weight: bold;
}

/* Other month days */
.ui-datepicker td.ui-datepicker-other-month span {
    color: #555555; /* Dim other month days */
}

/* Datepicker input field (adjust to match) */
.datepicker-input {
    background-color: var(--bg-black);
    border: 1px solid var(--main-cyan);
    color: var(--main-cyan);
    padding: 10px;
    border-radius: 8px; /* Rounder corners */
    font-family: var(--pixel-font);
}

/* --- Modal Styling --- */
.modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 10; /* Sit on top of everything */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgba(0,0,0,0.8); /* Darker overlay */
}

.modal-content {
    background-color: var(--dark-grey);
    margin: 10% auto; /* 10% from the top and centered */
    padding: 20px;
    border: 2px solid var(--main-cyan);
    border-radius: 15px; /* Rounder corners */
    width: 80%;
    max-width: 600px; /* Limit max width */
    position: relative; /* For close button positioning */
}

.close-button {
    color: var(--main-cyan);
    float: right;
    font-size: 2em;
    font-weight: bold;
    cursor: pointer;
    position: absolute;
    top: 10px;
    right: 20px;
}

.close-button:hover,
.close-button:focus {
    color: #00DCDC;
    text-decoration: none;
}

.uploader-area {
    border: 2px dashed var(--main-cyan);
    padding: 20px;
    text-align: center;
    border-radius: 10px; /* Rounder corners */
    color: var(--main-cyan);
    margin-top: 15px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.uploader-area:hover {
    background-color: var(--medium-grey);
}

footer {
    margin-top: auto; /* Pushes footer to the bottom */
    padding: 15px;
    background-color: var(--bg-black);
    border-top: 2px solid var(--main-cyan);
    text-align: center;
    color: var(--main-cyan);
    font-size: 0.75em; /* Smaller for footer */
}

/templates/admin_add_leaderboard
{% extends 'base.html' %}
{% block content %}
    <h2>Add Leaderboard Entry</h2>
    <form method="post">
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
        </div>
        <div>
            <label for="country">Country:</label> {# New: Country Field #}
            <input type="text" id="country" name="country" required>
        </div>
        <div>
            <label for="challenges_completed">Challenges Completed:</label>
            <input type="number" id="challenges_completed" name="challenges_completed" value="0">
        </div>
        <div>
            <label for="respect">Respect:</label>
            <input type="number" id="respect" name="respect" value="0">
        </div>
        <button type="submit">Add Entry</button>
    </form>
{% endblock %}
/templates/admin_add_user
{% extends 'base.html' %}

{% block content %}
    <h2>Add New User</h2>
    <form method="post">
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
        </div>
        <button type="submit">Add User</button>
        <a href="{{ url_for('admin_panel') }}" class="button">Cancel</a>
    </form>
{% endblock %}

/templates/admin_edit_leaderboard

{% extends 'base.html' %}
{% block content %}
    <h2>Add New User</h2>
    <form method="post">
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
        </div>
        <div>
            <label for="country">Country (for leaderboard):</label> {# New: Country Field #}
            <input type="text" id="country" name="country" value="Unknown">
        </div>
        <div>
            <input type="checkbox" id="is_admin" name="is_admin">
            <label for="is_admin" class="inline-label">Make Admin</label>
        </div>
        <button type="submit">Add User</button>
    </form>
{% endblock %}

/templates/admin_edit_user

{% extends 'base.html' %}
{% block content %}
    <h2>Edit User: {{ user.username }}</h2>
    <form method="post">
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" value="{{ user.username }}" required>
        </div>
        <div>
            <label for="password">New Password (leave blank to keep current):</label>
            <input type="password" id="password" name="password">
        </div>
        <div>
            <label for="country">Country (for leaderboard):</label> {# New: Country Field #}
            <input type="text" id="country" name="country" value="{{ linked_country }}" required>
        </div>
        <div>
            <input type="checkbox" id="is_admin" name="is_admin" {% if user.is_admin %}checked{% endif %}>
            <label for="is_admin" class="inline-label">Make Admin</label>
        </div>
        <button type="submit">Update User</button>
    </form>
{% endblock %}

/templates/admin.html

{% extends 'base.html' %}
{% block content %}
    <h2>Admin Panel</h2>

    <h3>Leaderboard Entries</h3>
    <p><a href="{{ url_for('admin_add_leaderboard') }}" class="button">Add New Leaderboard Entry</a></p>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Username</th>
                <th>Country</th> {# New: Country Column #}
                <th>Challenges</th>
                <th>Respect</th>
                <th>User ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for entry in leaderboard_entries %}
            <tr>
                <td>{{ entry.id }}</td>
                <td>{{ entry.username }}</td>
                <td>{{ entry.country }}</td> {# New: Display Country #}
                <td>{{ entry.challenges_completed }}</td>
                <td>{{ entry.respect }}</td>
                <td>{{ entry.user_id }}</td>
                <td class="actions">
                    <a href="{{ url_for('admin_edit_leaderboard', entry_id=entry.id) }}" class="button">Edit</a>
                    <form action="{{ url_for('admin_delete_leaderboard', entry_id=entry.id) }}" method="post" onsubmit="return confirm('Are you sure you want to delete this leaderboard entry?');">
                        <button type="submit" class="button btn-danger">Delete</button>
                    </form>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <h3>Users</h3>
    <p><a href="{{ url_for('admin_add_user') }}" class="button">Add New User</a></p>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Username</th>
                <th>Is Admin</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for user in users %}
            <tr>
                <td>{{ user.id }}</td>
                <td>{{ user.username }}</td>
                <td>{{ 'Yes' if user.is_admin else 'No' }}</td>
                <td class="actions">
                    <a href="{{ url_for('admin_edit_user', user_id=user.id) }}" class="button">Edit</a>
                    <form action="{{ url_for('admin_delete_user', user_id=user.id) }}" method="post" onsubmit="return confirm('Are you sure you want to delete this user?');">
                        <button type="submit" class="button btn-danger">Delete</button>
                    </form>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
{% endblock %}

/templates/base.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hacker Leaderboard</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="{{ url_for('index') }}">Home</a></li>
                {% if session.get('logged_in') %}
                    {% if session.get('is_admin') %}
                        <li><a href="{{ url_for('admin_panel') }}">Admin Panel</a></li>
                    {% endif %}
                    <li><a href="{{ url_for('edit_profile') }}">Edit Profile</a></li>
                    <li><a href="{{ url_for('logout') }}">Logout</a></li>
                {% else %}
                    <li><a href="{{ url_for('login') }}">Login</a></li>
                    <li><a href="{{ url_for('register') }}">Register</a></li>
                {% endif %}
            </ul>
        </nav>
    </header>

    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                <ul class="flashes">
                    {% for category, message in messages %}
                        <li class="{{ category }}">{{ message }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        {% endwith %}

        {% block content %}{% endblock %}
    </div>

    <footer>
        <p>&copy; 2025 Hacker Leaderboard</p>
    </footer>

    <script>
        $(function() {
            $("#some_date").datepicker({
                dateFormat: "yy-mm-dd"
            });
        });

        function openModal(modalId) {
            document.getElementById(modalId).style.display = "block";
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = "none";
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            var modal = document.getElementById('myModal'); // Assuming 'myModal' is your common modal ID
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        // For uploader (placeholder)
        document.addEventListener('DOMContentLoaded', function() {
            var uploaderArea = document.querySelector('.uploader-area');
            if (uploaderArea) {
                uploaderArea.addEventListener('click', function() {
                    alert('File uploader clicked! (Functionality not implemented in this example)');
                });
            }
        });
    </script>
</body>
</html>

/templates/edit_profile

{% extends 'base.html' %}
{% block content %}
    <h2>Edit Your Profile</h2>
    <form method="post">
        <div>
            <label for="challenges_completed">Challenges Completed:</label>
            <input type="number" id="challenges_completed" name="challenges_completed" value="{{ profile.challenges_completed }}" required>
        </div>
        <div>
            <label for="country">Country:</label> {# New: Country Field #}
            <input type="text" id="country" name="country" value="{{ profile.country }}" required>
        </div>
        <button type="submit">Update Profile</button>
    </form>
{% endblock %}

/templates/index.html

{% extends 'base.html' %}

{% block content %}
    <h2>Hacker Leaderboard</h2>
    <table>
        <thead>
            <tr>
                <th>Username</th>
                <th>Country</th> {# New: Country Column #}
                <th>Rank</th>
                <th>Challenges Completed</th>
                <th>Respect</th>
                {% if session.get('logged_in') %}
                    <th>Actions</th>
                {% endif %}
            </tr>
        </thead>
        <tbody>
            {% for entry in leaderboard %}
            <tr>
                <td>{{ entry.username }}</td>
                <td>{{ entry.country }}</td> {# New: Display Country #}
                <td>{{ entry.rank }}</td>
                <td>{{ entry.challenges_completed }}</td>
                <td>{{ entry.respect }}</td>
                {% if session.get('logged_in') %}
                    <td>
                        {% if session.get('user_id') != entry.user_id %} {# Ensure it's not the user's own entry #}
                            <form action="{{ url_for('respect_entry', leaderboard_entry_id=entry.id) }}" method="post">
                                <button type="submit" class="respect-button {{ 'respected' if entry.has_liked }}">
                                    {% if entry.has_liked %}💚{% else %}👍{% endif %} {# Green heart or thumbs up for respect #}
                                </button>
                            </form>
                        {% endif %}
                    </td>
                {% endif %}
            </tr>
            {% else %}
            <tr>
                <td colspan="6">No entries yet. Register to add yourself!</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
{% endblock content %}

/templates/login.html

{% extends 'base.html' %}
{% block content %}
    <h2>Login to the Grid</h2>
    <form method="post">
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
        </div>
        <button type="submit">Login</button>
    </form>
{% endblock %}

/templates/register.html

{% extends 'base.html' %}
{% block content %}
    <h2>Register New Hacker</h2>
    <form method="post">
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
        </div>
        <div>
            <label for="confirm_password">Confirm Password:</label> {# New: Confirm Password Field #}
            <input type="password" id="confirm_password" name="confirm_password" required>
        </div>
        <div>
            <label for="country">Country:</label>
            <input type="text" id="country" name="country" required>
        </div>
        <button type="submit">Register</button>
    </form>
{% endblock %}